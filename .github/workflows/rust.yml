name: Rust CI

on:
  push:
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  # Run tests for the Rust simulation core
  test:
    name: Test
    runs-on: ubuntu-latest
    # Only run if Rust code exists in the repository
    if: ${{ hashFiles('Cargo.toml') != '' }}
    strategy:
      matrix:
        rust: [stable, beta]  # Test against stable and beta to catch future compatibility issues

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      # Cache dependencies to speed up builds
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-

      # Run standard tests
      - name: Run tests
        run: cargo test --verbose

      # Test with all feature flags enabled to ensure compatibility
      - name: Run tests with all features
        run: cargo test --all-features --verbose

  # Code quality checks - formatting, linting, and documentation
  lint:
    name: Lint
    runs-on: ubuntu-latest
    # Only run if Rust code exists in the repository
    if: ${{ hashFiles('Cargo.toml') != '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      # Cache dependencies for faster builds
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      # Ensure consistent code formatting
      - name: Check formatting
        run: cargo fmt -- --check

      # Run clippy linter with strict warnings
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      # Verify documentation builds without warnings
      - name: Check documentation
        run: cargo doc --no-deps --document-private-items --all-features
        env:
          RUSTDOCFLAGS: -D warnings

  # Security audit - check for known vulnerabilities in dependencies
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    # Only run if Rust code exists in the repository
    if: ${{ hashFiles('Cargo.toml') != '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # Install cargo-audit for vulnerability scanning
      - name: Install cargo-audit
        run: cargo install cargo-audit

      # Scan dependencies for known security vulnerabilities
      - name: Run security audit
        run: cargo audit

