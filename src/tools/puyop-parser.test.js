#!/usr/bin/env deno run --allow-net

import { parsePuyopUrl } from './puyop-parser.js';

// Test cases
const testCases = [
  {
    name: 'Empty field (minimal code)',
    url: 'https://www.puyop.com/s/000',
    expected: `......
......
......
......
......
......
......
......
......
......
......
......
......`.trim(),
  },
  {
    name: 'Path-based field code',
    url: 'https://www.puyop.com/s/pg0ra09i0',
    expected: `......
......
......
......
......
......
......
......
......
......
BRG...
BBRG..
RRGG..`.trim(),
  },
  {
    name: 'Another example field',
    url: 'https://www.puyop.com/s/123abc',
    expected: `......
......
......
......
......
......
......
......
......
......
......
.R.G.B
RGRBRY`.trim(),
  },
  {
    name: 'Complex field with multiple puyos',
    url: 'https://www.puyop.com/s/3pkrraA9iz',
    expected: `......
......
......
......
......
......
......
......
......
.....B
BRGYBB
BBRGYY
RRGGYB`.trim(),
  },
  {
    name: 'Very complex field with long code',
    url: 'https://www.puyop.com/s/804rcxpcpAxbpkrraA9iz',
    expected: `......
......
......
......
......
......
R....Y
BBRYYR
BRRYBR
YYYRRB
BRGYBB
BBRGYY
RRGGYB`.trim(),
  },
  // New test cases based on specifications
  {
    name: 'Single puyo - R at bottom right',
    url: 'https://www.puyop.com/s/1',
    expected: `......
......
......
......
......
......
......
......
......
......
......
......
.....R`.trim(),
  },
  {
    name: 'Horizontal pair - RR',
    url: 'https://www.puyop.com/s/9',
    expected: `......
......
......
......
......
......
......
......
......
......
......
......
....RR`.trim(),
  },
  {
    name: 'Horizontal pair - RB',
    url: 'https://www.puyop.com/s/b',
    expected: `......
......
......
......
......
......
......
......
......
......
......
......
....RB`.trim(),
  },
  {
    name: 'Horizontal triple - RRY',
    url: 'https://www.puyop.com/s/1c',
    expected: `......
......
......
......
......
......
......
......
......
......
......
......
...RRY`.trim(),
  },
  {
    name: 'Vertical pair - RR',
    url: 'https://www.puyop.com/s/1001',
    expected: `......
......
......
......
......
......
......
......
......
......
......
.....R
.....R`.trim(),
  },
];

// Test the parser with sample URLs
console.log('Testing PuyoP URL Parser\n');

let passedTests = 0;
const totalTests = testCases.length;

testCases.forEach((testCase, index) => {
  console.log(`Test ${index + 1}: ${testCase.name}`);
  console.log(`URL: ${testCase.url}`);

  const result = parsePuyopUrl(testCase.url);

  if (result) {
    console.log('Parsed field:');
    console.log(result);

    // Compare with expected result
    const normalizeText = (text) => text.replace(/\s+/g, ' ').trim();
    const actualNormalized = normalizeText(result);
    const expectedNormalized = normalizeText(testCase.expected);

    if (actualNormalized === expectedNormalized) {
      console.log('✅ PASS - Result matches expected');
      passedTests++;
    } else {
      console.log('❌ FAIL - Result does not match expected');
      console.log('Expected:');
      console.log(testCase.expected);
      console.log('Actual:');
      console.log(result);
    }
  } else {
    console.log('Failed to parse or empty field');
    console.log('❌ FAIL - Could not parse URL');
  }

  console.log('-'.repeat(50));
});

console.log(`\nTest Summary: ${passedTests}/${totalTests} tests passed\n`);
